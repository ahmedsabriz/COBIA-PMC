// BZZMATH: Release 3.1

// =============================< AAAAAA.HPP >=================================
// * Class Bzz### for *
// * Description: Dal Fortan al C++	(Capitolo )										*
// *					by G. Buzzi-Ferraris														*
// *					Addison Wesley(1991)														*
// *							and																	*
// *					Scientific C++	(Chapter )											*
// *					by G. Buzzi-Ferraris														*
// *					Addison Wesley(1993)														*
// *							and																	*
//	*					Metodi numerici e Software in C++ (Capitolo )					*
// *					by G. Buzzi-Ferraris														*
// *					Addison Wesley Longman(1998)											*
// *																									*
// * Examples: c:\bzzmath\examples\.cpp*
// ============================================================================

// Revision History (MM-YYYY)
//	Author	Guido Buzzi-Ferraris
//	04-1991	Date Written.															 

// ============================================================================
// ****** Constructors for Bzz###:														*
// * Bzz### v; // default																	*
// * Bzz### v = x; // copy-initializer													*
// * Bzz### v(n); // 			*
// ****************************************************************************
// ***** Access functions :																	*
// **
// ****************************************************************************
// ***** Assignment:																				*
// **
// ****************************************************************************
// ***** BzzPrint and BzzMessage																*
// * v.BzzPrint();																				*
// * v.BzzMessage();																				*
// **
// ****************************************************************************
// ***** Implemented operations :															*
// **
// ****************************************************************************
// ***** Operators for tests:																	*
// **
// * if(v == w)																					*
// * if(v != w)																					*
// ****************************************************************************
// ***** Other functions:																		*
// **
// ****************************************************************************
// ****************************************************************************

#ifndef BZZ_AAAAAA_HPP
#define BZZ_AAAAAA_HPP


// ============================================================================
// ============================< class Bzz### >=============================
// ============================================================================

class Bzz### : public BzzBaseClass
	{
private:
	static const char *const BZZ_ERROR;
	static int count; // for whoAmI
	static int countInScope;	

	// initialise constructors
	void Initialize(int nc);

	int	whoAmI,
			printTasks,
			printSubTasks;

public:

// ============================================================================
// ***************************< constructors >*********************************
// ============================================================================
	// default constructor Bzz### v;
	Bzz###(void); 

	// copy-initializer
	Bzz###(Bzz### &rval);
	
	// other constructor
	Bzz###(int nc);

// ============================================================================
// *****************************< destructor >*********************************
// ============================================================================
	~Bzz###(void);

// ============================================================================
// *******************< Non-modifying access functions >***********************
// ============================================================================
	int WhoAmI(void) const {return whoAmI;}
	static int ObjectCount(void){return count;}
	static int ObjectCountInScope(void){return countInScope;}

// ============================================================================
// ******************************< Setting functions >*************************
// ============================================================================
	void SetTasksPrint(void){printTasks = 1;}
	void SetSubTasksPrint(void){printSubTasks = 1;}

// ============================================================================
// **********************< Modifying access functions >************************
// ============================================================================

// ============================================================================
// *************************< assignment operators >***************************
// ============================================================================
	Bzz### &operator =
		 (const Bzz### &rval);

// ============================================================================
// *************************< operators for tests >****************************
// ============================================================================
	friend char operator ==
		 (const Bzz### &lval,const Bzz### &rval);

	friend char operator !=
		 (const Bzz### &lval,const Bzz### &rval);

// ============================================================================
// =============================< OPERATIONS >=================================
// ============================================================================


// ============================================================================
// ====================< Non-modifying functions >=============================
// ============================================================================

// ******************************< BzzPrint >**********************************
	virtual void ObjectBzzPrint(void);

//	********************************< Save >************************************
	void Save(char *file***); // formatted
	void Save(char,char *file***);// binary

// ============================================================================
// ======================< Modifying Functions >===============================
// ============================================================================
	friend void Delete(Bzz### *result); // eliminates Bzz###

	// recovery from Save
	friend void Load
			(Bzz### *result,char *file***); // formatted
	friend void Load
			(Bzz### *result,char,char *file***);// binary

// ============================================================================
// =========================< Other functions >================================
// ============================================================================

};

#endif // BZZ_AAAAAA_HPP


